require "pandarus/api_base"
require "pandarus/models"

# This is an autogenerated file. See readme.md
module Pandarus
  class Lti < APIBase

    self.prefix = "https://canvas.instructure.com/api"

    

    # Create an Originality Report
    def create_originality_report(assignment_id,submission_id,originality_report__file_id__,originality_report__originality_score__,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        :originality_report__file_id__,
        :originality_report__originality_score__,
        :originality_report__originality_report_url__,
        :originality_report__originality_report_file_id__,
        :originality_report__tool_setting____resource_type_code__,
        :originality_report__tool_setting____resource_url__,
        :originality_report__workflow_state__,
        

      ]

      # verify existence of params
      raise "assignment_id is required" if assignment_id.nil?
      raise "submission_id is required" if submission_id.nil?
      raise "originality_report__file_id__ is required" if originality_report__file_id__.nil?
      raise "originality_report__originality_score__ is required" if originality_report__originality_score__.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :assignment_id => assignment_id,
        :submission_id => submission_id,
        :originality_report__file_id__ => originality_report__file_id__,
        :originality_report__originality_score__ => originality_report__originality_score__

      )

      # resource path
      path = path_replace("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report",
        :assignment_id => assignment_id,
        :submission_id => submission_id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:post, path, query_params, form_params, headers)
      OriginalityReport.new(response)
      

    end
    

    # Edit an Originality Report
    def edit_originality_report_submissions(assignment_id,submission_id,id,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        :originality_report__originality_score__,
        :originality_report__originality_report_url__,
        :originality_report__originality_report_file_id__,
        :originality_report__tool_setting____resource_type_code__,
        :originality_report__tool_setting____resource_url__,
        :originality_report__workflow_state__,
        

      ]

      # verify existence of params
      raise "assignment_id is required" if assignment_id.nil?
      raise "submission_id is required" if submission_id.nil?
      raise "id is required" if id.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :assignment_id => assignment_id,
        :submission_id => submission_id,
        :id => id

      )

      # resource path
      path = path_replace("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
        :assignment_id => assignment_id,
        :submission_id => submission_id,
        :id => id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:put, path, query_params, form_params, headers)
      OriginalityReport.new(response)
      

    end
    

    # Edit an Originality Report
    def edit_originality_report_files(assignment_id,file_id,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        :originality_report__originality_score__,
        :originality_report__originality_report_url__,
        :originality_report__originality_report_file_id__,
        :originality_report__tool_setting____resource_type_code__,
        :originality_report__tool_setting____resource_url__,
        :originality_report__workflow_state__,
        

      ]

      # verify existence of params
      raise "assignment_id is required" if assignment_id.nil?
      raise "file_id is required" if file_id.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :assignment_id => assignment_id,
        :file_id => file_id

      )

      # resource path
      path = path_replace("/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
        :assignment_id => assignment_id,
        :file_id => file_id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:put, path, query_params, form_params, headers)
      OriginalityReport.new(response)
      

    end
    

    # Show an Originality Report
    def show_originality_report_submissions(assignment_id,submission_id,id,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        

      ]

      # verify existence of params
      raise "assignment_id is required" if assignment_id.nil?
      raise "submission_id is required" if submission_id.nil?
      raise "id is required" if id.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :assignment_id => assignment_id,
        :submission_id => submission_id,
        :id => id

      )

      # resource path
      path = path_replace("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}",
        :assignment_id => assignment_id,
        :submission_id => submission_id,
        :id => id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:get, path, query_params, form_params, headers)
      OriginalityReport.new(response)
      

    end
    

    # Show an Originality Report
    def show_originality_report_files(assignment_id,file_id,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        

      ]

      # verify existence of params
      raise "assignment_id is required" if assignment_id.nil?
      raise "file_id is required" if file_id.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :assignment_id => assignment_id,
        :file_id => file_id

      )

      # resource path
      path = path_replace("/lti/assignments/{assignment_id}/files/{file_id}/originality_report",
        :assignment_id => assignment_id,
        :file_id => file_id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:get, path, query_params, form_params, headers)
      OriginalityReport.new(response)
      

    end
    

    # Get a single user
    def get_single_user(id,opts={})
      query_param_keys = [
        

      ]

      form_param_keys = [
        

      ]

      # verify existence of params
      raise "id is required" if id.nil?
      # set default values and merge with input
      options = underscored_merge_opts(opts,
        :id => id

      )

      # resource path
      path = path_replace("/lti/users/{id}",
        :id => id)
      headers = nil
      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      response = mixed_request(:get, path, query_params, form_params, headers)
      response
      

    end
    

  end
end

